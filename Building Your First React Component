Step 1: Overview of React and Its Benefits
React is a JavaScript library for building user interfaces. It allows developers to create reusable UI components, which can lead to more organized and maintainable code. The benefits of using React include:

Component-Based Architecture: Encourages modular development.
Reusability: Components can be reused across different parts of the application.
Virtual DOM: Improves performance by minimizing direct manipulation of the DOM.
Declarative Syntax: Makes it easier to understand how the UI will look at any given state.
Step 2: Setting Up a React Development Environment
Install Node.js and npm: Download and install Node.js from Node.js official website. This will also install npm (Node Package Manager).

Create a New React Application: Open your terminal and run the following commands:

bash

Verify
Edit
Copy code
npm create vite my-first-react-app -- --template react
cd my-first-react-app
npm install
npm run dev
Verify the Setup: Open your browser and go to http://localhost:5173/ (or the port shown in your terminal). You should see the default Vite + React welcome page.

Step 3: Understanding JSX Syntax
JSX is a syntax extension for JavaScript that looks similar to HTML. It allows you to write HTML-like syntax directly in your JavaScript code.

Step 4: React Components and Rendering
1. Create the Components
Create a directory named components inside the src folder, and then create three files: Header.js, Main.js, and Footer.js.

Header.js
javascript

Verify
Edit
Copy code
// src/components/Header.js
import React from 'react';

const Header = () => {
    return <h1>Welcome to My React App</h1>;
};

export default Header;
Main.js
javascript

Verify
Edit
Copy code
// src/components/Main.js
import React from 'react';

const Main = () => {
    return <p>This is the main content area.</p>;
};

export default Main;
Footer.js
javascript

Verify
Edit
Copy code
// src/components/Footer.js
import React from 'react';

const Footer = () => {
    return <footer>Â© 2024 My React App</footer>;
};

export default Footer;
2. Update the App Component
Now, update the App.js file to import and use these components.

javascript

Verify
Edit
Copy code
// src/App.js
import React from 'react';
import Header from './components/Header';
import Main from './components/Main';
import Footer from './components/Footer';
import './styles.css'; // Import your CSS file here

const App = () => {
    return (
        <div>
            <Header />
            <Main />
            <Footer />
        </div>
    );
};

export default App;
Step 5: Adding Basic Styling
Create a styles.css file in the src directory and add some basic styles:

css

Verify
Edit
Copy code
/* src/styles.css */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

h1 {
    color: #333;
    text-align: center;
}

p {
    text-align: center;
}

footer {
    text-align: center;
    padding: 20px;
    background-color: #f1f1f1;
}
Step 6: Running the Application
After completing the above steps, ensure your development server is running. You should see your styled components rendered on the page.

Grading Criteria
Correct Setup: Ensure your project runs without errors.
Component Structure: Verify that you have created the Header, Main, and Footer components.
JSX Syntax: Check that you are using JSX correctly in your components.
Clean Code: Ensure your code is organized and easy to read.
Basic Styling: Confirm that your application has some basic styling applied.
Step 7: Submission
Once you have completed the assignment, push your code to a GitHub repository and submit the link as required.
